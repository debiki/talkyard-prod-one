# -*- mode: ruby -*-
# vi: set ft=ruby :

#===========
# What is this? This file tells a program named Vagrant how a
# Virtual Machine (VM) can be created and configured on your computer,
# in which you can test install Talkyard.
#
# ***
# MIGHT NO LONGER WORK? Was last tested with Ubuntu 18.04, but now we're
# at Ubuntu 22.04 — "ubuntu/jammy64" below. Don't know if today's Vagrant
# is compatible with this 4 years old file?
# ***
#
# Tips: You'll need to add  talkyard.port=8080  to play-framework.conf
# (mentioned in README.md).
#
# Go and read about Vagrant here: https://www.vagrantup.com/ — click
# "Getting Started" and read that page. Download and install Vagrant.
# Also install VirtualBox (or some othervirtualization system), so that
# there'll be something that can run the VM Vagrant will download for you.
# Then:
#
# 1) Create an empty folder named `talkyard-prod-test`. Copy this file into it.
# 2) cd into that folder, and type `vagrant up`
# 3) Wait for Vagrant do download stuff, and the VM to start.
# 4) Then type `vagrant ssh`, to open a shelll inside the VM.
# 5) Follow the instructions in README.md (but now you have a server already,
#    i.e. the Vagrant VM which you are inside right now).
#    Note that, when editing /opt/talkyard/conf/play-framework.conf, you'll need to
#    comment in:  talkyard.port=8080
#    and set:  talkyard.secure=false
#    since we'll access Talkyard via http://localhost:8080, no https cert.
# 6) To stop the VM, type CTRL-D to exit Vagrant, then type `vagrant halt`.
#
# Advanced tips: To ssh into the VM and also expose a port on the host inside the VM,
# do e.g.:   vagrant ssh -- -R 5000:localhost:5000
# This is useful if you have a local test Docker registry running at localhost:5000
# on the host, and want to make it available in the VM also at localhost:5000.
#===========

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/jammy64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
      vb.memory = "3000"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
